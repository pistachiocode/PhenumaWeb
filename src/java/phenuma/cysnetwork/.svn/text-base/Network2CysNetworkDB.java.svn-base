/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package phenuma.cysnetwork;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import ontologizer.StudySet;
import ontologizer.types.ByteString;
import org.apache.log4j.Logger;
import phenomizer.utils.NumberUtils;
import phenuma.dataqueries.DatabaseQueries2;
import phenuma.managedbeans.PhenumaWeb;
import phenuma.network.NetworkDB;
import phenuma.network.PhenotypeNetworkDB;
import phenuma.networkproyection.NetworkConstants;
import phenuma.networkproyection.NetworkUtils;
import phenuma.util.PhenumaException;

/**
 *
 * @author Armando
 */
public class Network2CysNetworkDB {
    
    static final Logger logger = Logger.getLogger(Network2CysNetworkDB.class.getName());
    
    PhenumaWeb pw = new PhenumaWeb();

    Set<Integer> nodes = new HashSet<Integer>(); 
       
    
    
    public static String network2CysNetworkDB(NetworkDB network) throws PhenumaException 
    {
        String cysnetwork = "";
        
        
        /*Create nodes list*/
        
        if (network.getRows() == null || network.getRows().isEmpty())
        {
            cysnetwork =  "{" + dataSchema() +", ";
        
            /* Nodes */
            cysnetwork = cysnetwork + "data: { nodes: []}}";
        }
        else if (!NetworkUtils.isBipartite(network.getQuerytype()))
        {
            cysnetwork =  "{" + dataSchema() +", ";
            
            /* Nodes */
            cysnetwork = cysnetwork + "data: { nodes: [";

            StudySet nodes = network.getNodes();
             

            if(NetworkUtils.isPhenotypeQuery(network.getQuerytype()))
            {
              
                cysnetwork = cysnetwork + cysNode(0, "Query", false, CytoscapeConstants.CYS_NODE_TYPE_QUERY)+", ";
                
            }
            
            
            for (ByteString object : nodes.getAllGeneNames())
            {
               cysnetwork = cysnetwork + cysNode(new Integer(object.toString()), nodes.getGeneDescription(object), CysNetworkUtils.isInput(object, network), CysNetworkUtils.getCysNodeType(object, network.getQuerytype()))+", ";
            }

            cysnetwork = cysnetwork + "]}} ";

        }else {
            
            cysnetwork =  "{" + dataSchema() +", ";
            /* Nodes */
            cysnetwork = cysnetwork + "data: { nodes: [";

            //Input nodes
            
            StudySet input = network.getInputElements();

            for (ByteString object : input.getAllGeneNames())
            {
               cysnetwork = cysnetwork + cysNode(new Integer(object.toString()), input.getGeneDescription(object), true, CysNetworkUtils.getCysBipartiteNodeType(network.getInputtype()))+", ";

            }
            
            
            StudySet nodes = network.getNodesDiseases();
                          
            for (ByteString object : nodes.getAllGeneNames())
            {
               cysnetwork = cysnetwork + cysNode(new Integer(object.toString()), nodes.getGeneDescription(object), false, CysNetworkUtils.getCysBipartiteNodeType_Related(network.getQuerytype(), network.getInputtype()))+", ";

            }

            
            cysnetwork = cysnetwork + "]}} ";
            
        }
          
        logger.info("Created cytoscape web nodes");
        return cysnetwork;

    }

    /**
     * Current schema. TODO It must be stored in constants declaration, configuration file...
     * @return 
     */
    public static String dataSchema(){
        CysDataSchema dataSchema = new CysDataSchema();
        
        //node attributes
        dataSchema.addNodeAttr("type", "number");
        dataSchema.addNodeAttr("label", "string");
        dataSchema.addNodeAttr("input", "number");
        
        //edge attributes
        dataSchema.addEdgeAttr("score", "number");
        dataSchema.addEdgeAttr("pvalue", "number");
        dataSchema.addEdgeAttr("type", "number");
        dataSchema.addEdgeAttr("isnew", "boolean");
       
        return dataSchema.getDataSchema();
    }

    
    /**
     * This method create a string for a dataschema field.
     * @param name
     * @param type
     * @return 
     */
    public static String cysEdge(String source, String target, String score, Double pvalue, Integer relationshipType, boolean isnew)
    {
        String cysEdge = "";
        
        
        String id = source+"*"+target+"*"+relationshipType;
       // String relationshipLabel = CysNetworkUtils.getRelationshipTypeLabel(relationshipType);

        /*If the score of the relationship is not null*/
        if(score!=null)                   
            cysEdge = "{ id: \""+id+"\", target: \""+target+"\", source: \""+source+"\", score: "+score+", pvalue: "+pvalue+", type:"+relationshipType+", isnew:"+isnew+"}";
        
        
        return cysEdge;
    }
    

    public static String subNetworks(NetworkDB network){
        
        logger.info("Generating cytoscape subnetwork");
        
        String subnetworks = "";

        if (network.getRows() == null || network.getRows().isEmpty())
            return "{ simsemhpo: []}";
            
        /*Map object which stores the subnetworks*/
        Map<Integer, String> subnetworkMap = new HashMap<Integer, String>();
        
        if (NetworkUtils.isPhenotypeQuery(network.getQuerytype()))
        {
            PhenotypeNetworkDB phenotypenetwork = (PhenotypeNetworkDB)network;
            
            for(Object[] row : phenotypenetwork.getResultRelationships())
            {
                 addPhenotypicQueryRelationship(subnetworkMap, row, network.getQuerytype());
            }
        }
       
        
        for(Object[] row : network.getRows()){
             
            
            if (!NetworkUtils.isBipartite(network.getQuerytype())) 
            {
                //Relationships     
                int i = NetworkUtils.getPositionFirstRelationship(network.getQuerytype());

                while(i <= NetworkUtils.getPositionLastRelationship(network.getQuerytype()))
                {
                    addRelationship(i, network, subnetworkMap, row);
                    i++;
                }
            }
            else
            {
                //Para orphan diseases las constantes tiene el mismo valor
                
                addRelationship(NetworkConstants.GENEOMIM_REL_KNOWN_POS, network, subnetworkMap, row);
                
                if (network.getInputtype() == NetworkConstants.INPUT_TYPE_GENES)
                    addRelationship(NetworkConstants.GENEOMIM_REL_PHENOTYPIC_OMIM_POS, network, subnetworkMap, row);
                else
                    addRelationship(NetworkConstants.GENEOMIM_REL_PHENOTYPIC_GENE_POS, network, subnetworkMap, row);
               
            }
        }
        
        
        //toString
        
        subnetworks = "{";
        Set<Integer> reltypeSet = subnetworkMap.keySet();
        for(Integer r : reltypeSet)
        {
            subnetworks = subnetworks + r +": ["+ subnetworkMap.get(r) +"], ";
        }
        if(!reltypeSet.isEmpty())
            subnetworks = subnetworks.substring(0, subnetworks.length()-2)+"}";
        
     
        logger.info("Created cytoscape edgess");
        
        return subnetworks;
    }
    
    /**
     * This method create a string for a dataschema field.
     * @param name
     * @param type
     * @return 
     */
//    public static String cysField(String name, String type)
//    {
//        String field = null;
//        
//        if(name!=null && type!=null)
//            field = "{ name: \""+name+"\",  type: \""+type+"\"}";
//        
//        return field;
//    }
//    
    /**
     * This method create a string with the information of a node
     * in cytoscape networkmodel format:
     * 
     * {id=id, name="name", type="type"}
     * 
     * The fields depends on datashema defined
     * @param anObject
     * @return 
     */
    public static String cysNode(Integer objectID, String name, boolean isInput, Integer nodetype) throws PhenumaException 
    {

        DatabaseQueries2 q = new DatabaseQueries2();
        
        String nodeStr = "";
        
        if(name == null || name.isEmpty())
        {
            if(nodetype.equals(CytoscapeConstants.CYS_NODE_TYPE_GENE))
                name = q.getGeneByEntrezId(objectID.toString()).getSymbol();
            else if (nodetype.equals(CytoscapeConstants.CYS_NODE_TYPE_OMIM))
                name = q.getDiseaseByOmim(objectID.toString()).getName();
            else if (nodetype.equals(CytoscapeConstants.CYS_NODE_TYPE_ORPHA))
                name = q.getRareDiseasesByOrphanum(objectID.toString()).getName();
            else if (nodetype.equals(CytoscapeConstants.CYS_NODE_TYPE_QUERY))
                name = "Query";
        }
        
        if(name == null || name.isEmpty())
        {
            name = objectID.toString();
        }
        
        Integer input = 0;
        if (isInput)
            input = 1;
        
  
        /* Build node */
        if(objectID!=null && nodetype!=null)
            nodeStr = "{ id: \""+objectID+"\", input: "+input+", label:\""+name+"\", type: "+nodetype+"}";
        

        return nodeStr;
        
    }    
    
    /**
     * 
     * @param i              relationship position
     * @param network        NetworkDB object: list of rows from the database, querytype, input type
     * @param subnetworkMap  inout subnetwork map Name --> subnetwork edges 
     * @param row            Current row
     * @param source         Source Gene
     * @param target       
     */
     private static void addRelationship(int i, NetworkDB network, Map<Integer, String> subnetworkMap, Object[] row) 
    {
        try
        {
            
            Integer source = null;
            Integer target = null;
            
            source = (Integer) row[NetworkConstants.DATABASE_MATRIX_OBJECTX_POS];
            target = (Integer) row[NetworkConstants.DATABASE_MATRIX_OBJECTY_POS];

            
            Integer reltype = CysNetworkUtils.getRelationshipTypeLabelDB(i, network.getInputtype(), network.getQuerytype());
            
            String subnetwork = subnetworkMap.get(reltype);

            if(subnetwork == null)
                subnetwork = "";

            String score = "";
            String str = NumberUtils.object2string(row[i]);
            
            if(str != null && !str.isEmpty()){
                Double score_d = NumberUtils.round(new Double(str),3);
                score = score_d.toString();
            }
            
            
            
            boolean isnew = NetworkUtils.isNewRelationship(row, network.getQuerytype());
            
            if(str!=null && !str.isEmpty()){
                subnetwork = subnetwork + " \n{ group:\"edges\", data: "
                                        + cysEdge(source.toString(), target.toString(), score, 0.0, CysNetworkUtils.getNetworkRelationshipTypeDB(i, network.getInputtype(), network.getQuerytype()), isnew)+"}, ";
            }

          
            if(!subnetwork.isEmpty()){
                subnetworkMap.put(reltype, subnetwork);
            }
        }
        catch(Exception ex)
        {
            System.out.println("Error add relationship "+i+" of "+row[1]+"\t"+row[2]+"\t"+row[i]+": "+ex.getMessage());
        }
    }
     
     
     /**
     * 
     * @param i              relationship position
     * @param network        NetworkDB object: list of rows from the database, querytype, input type
     * @param subnetworkMap  inout subnetwork map Name --> subnetwork edges 
     * @param row            Current row
     * @param source         Source Gene
     * @param target       
     */
    private static void addPhenotypicQueryRelationship(Map<Integer, String> subnetworkMap, Object[] row, int querytype) 
    {
        try
        {
            String source = (String)row[0]; //"Query"
            String target = (String)row[1]; //Object: Disease/gene

         
            Integer reltype = NetworkConstants.NETWORK_REL_TYPE_PHENOTYPIC;
            
            String subnetwork = subnetworkMap.get(reltype);

            if(subnetwork == null)
                subnetwork = "";

           
            System.out.println(row[NetworkConstants.QUERYOBJECT_REL_PHENOTYPIC_POS]);
            
            String score = NumberUtils.object2string(row[NetworkConstants.QUERYOBJECT_REL_PHENOTYPIC_POS]);
            Double pvalue = new Double(NumberUtils.object2string(row[NetworkConstants.QUERYOBJECT_REL_PVALUE]));
            
            if(score!=null && !score.isEmpty()){
                subnetwork = subnetwork + " \n{ group:\"edges\", data: "
                                        + cysEdge(source, target, score, pvalue, NetworkConstants.NETWORK_REL_TYPE_PHENOTYPIC, false)+"}, ";
            }

          
            if(!subnetwork.isEmpty()){
                subnetworkMap.put(reltype, subnetwork);
            }
            

        }
        catch(Exception ex)
        {
            logger.info("Error add phenotype query relationship: "+row[0]+"\t"+row[1]+"\t"+row[2]+": "+ex.getMessage());
        }
    } 
    
//    /**
//     * This method check if the input row is a new relationships, that is, there is phenotypic
//     * relationship between the genes or disease but there is not other kind of relationship. (Only for unipartite networks)
//     * 
//     * @param row
//     * @return 
//     */
//    public static boolean isNewRelationship(Object[] row, int querytype)
//    {
//        if(!NetworkUtils.isBipartite(querytype))
//        {        
//            boolean isnew = false;
//            //This value (3) is the same in disease and orphan diseases networks,
//            //the rest of relationships are placed in the following positions, 4,5,6... 
//            int position = NetworkConstants.GENEGENE_REL_PHENOTYPIC_POS;
//
//            String score = NumberUtils.object2string(row[position]);
//
//            if(score!=null && !score.isEmpty())
//            {
//                isnew = true;
//                for(int i = position+1; i<=NetworkUtils.getPositionLastRelationship(querytype); i++)
//                {
//                    isnew = isnew && (row[i]==null);
//                }
//
//
//            }
//
//            return isnew;
//        }
//        
//        return false;
//    }
    
}
