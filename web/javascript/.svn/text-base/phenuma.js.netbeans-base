
//TODO: Definir como globales

var disease = 2;
var gene = 1;
var orphanum = 3;

//relationshiptype
var simsemhpo = 0
var simsemgobp = 1
var simsemgocc = 2
var simsemgomf = 3
var infomim = 4
var inforpha = 5
var infgene = 6
var ppi = 7
var metabolic = 8
var omim = 9
var orphadata = 10
var queryer = 11
var querydisease = 12
var querygene =  13

function getLink(data)
{
   return getLink(data, data.type)
}

function getLink(data, type)
{
    if(type == disease_type)
    {
        return "http://omim.org/entry/"+data.id
    }
    else if(type == gene_type)
    {
       return "http://www.ncbi.nlm.nih.gov/gene/"+data.id     
    }
    else if(type >= orphanum_type)
    {
       return "http://www.orpha.net/consor/cgi-bin/OC_Exp.php?lng=EN&Expert="+data.id     
    }
    
    return "";
}


function getIcon(data)
{
    if (data.type == gene_type)
    {
        return "phenumageneicon"
    }
    else if (data.type == disease_type)
    {
        return "phenumadiseaseicon"
    }
    else if (data.type >= orphanum_type)
    {
        return "phenumaorphaneticon"
    }
           
    return "";
}


function getDatabase(data)
{
    if (data.type == gene_type)
    {
        return "Entrez"
    }
    else if (data.type == disease_type)
    {
        return "OMIM"
    }
    else if (data.type >= orphanum_type)
    {
        return "Orphanum"
    }
           
    return "";
}


function getRelationshipType(type)
{

    if (type == simsemgobp)
    {
        return "Functional Similarity (Biological Process)"
    }
    else if (type == simsemgocc)
    {
        return "Functional Similarity (Cellular Component)"
    }
    else if (type == simsemgomf)
    {
        return "Functional Similarity (Molecular Function)"
    }
    else if (type == simsemhpo)
    {
        return "Phenotypic Similarity"
    }
    else if (type == ppi)
    {
        return "Protein-Protein Interaction"
    }
    else if (type == metabolic)
    {
        return "Metabolic Interaction"
    }
    else if (type == infgene)
    {
        return "Inferred Relationship by Genes"
    }
    else if (type == infomim)
    {
        return "Inferred Relationship by OMIM"
    }
    else if (type == inforpha)
    {
        return "Inferred Relationship by Orphan Diseases"
    }
    else if (type == omim)
    {
        return "Known Relationship from OMIM"
    }
    else if (type == orphadata)
    {
        return "Known Relationship from Orphanet"
    }
    

    
    return "";
}

function getSource(data)
{
      if (data.type == simsemgobp)
    {
        return "Gene Ontology (Biological Process)"
    }
    else if (data.type == simsemgocc)
    {
        return "Gene Ontology (Cellular Component)"
    }
    else if (data.type == simsemgomf)
    {
        return "Gene Ontology (Molecular Function)"
    }
    else if (data.type == simsemhpo)
    {
        return "Human Phenotype Ontology"
    }
    else if (data.type == ppi)
    {
        return "STRING"
    }
    else if (data.type == metabolic)
    {
        return "Veeramani et al."
    }
    else if (data.type == infgene)
    {
        return "OMIM/Orphanet"
    }
    else if (data.type == infomim)
    {
        return "OMIM (Gene Map)"
    }
    else if (data.type == inforpha)
    {
        return "Orphanet"
    }
    else if (data.type == omim)
    {
        return "OMIM (Gene Map)"
    }
    else if (data.type == orphadata)
    {
        return "Orphanet"
    }
    
    return "";
}


function getPrevalence(type)
{
    if(type==orphanum_type)
    {
        return ">1/1000";
    }
    else if(type==orphanum_low_1_type)
    {
       return "1-5/10000";    
    }
    else if(type==orphanum_low_2_type)
    {
       return "1-9/100000";       
    }
    else if(type==orphanum_low_3_type)
    {
       return "1-9/1000000";        
    }    
    else if(type==orphanum_low_4_type)
    {
       return "<1/1000000";    
    }
}

function toggleview(form, form2)
{

    if($(form).is(':visible'))
    {
        $(form).hide(); 
        $(form2).show();

        datatable("");
    }
    else
    {
        $(form2).hide();
        $(form).show();
    }

}

function infoblack(text)
{
    return "<img src='./resources/img/info_black.png' height='20' width='20' alt='"+text+"'/>";
}


function insertLinkHTML(data, text)
{
    return insertLinkHTML(data, text, data.type)
}

function insertLinkHTML(data, text, type)
{
    return "<a class='qtiplinks' href=\""+getLink(data, type)+"\" target='_blank'>"+text+" </a>";
}


function datatable(filter)
{
 
    var network = getSubnetworks();
    
    var table_header = "<thead class='phenumaresult_header'> " +
                            "<th><a class='phenumaresult_title' onclick=\"SortTable(0, 'resulttable', 'link'); href='javascript:;'\">Nodo1</a></th>" +
                            "<th><a class='phenumaresult_title' onclick=\"SortTable(1, 'resulttable', 'link'); href='javascript:;'\">Nodo2</a></th>" +
                            "<th><a class='phenumaresult_title' onclick=\"SortTable(2, 'resulttable', 'text'); href='javascript:;'\">Input</a></th>" +
                            "<th><a class='phenumaresult_title' onclick=\"SortTable(3, 'resulttable', 'text'); href='javascript:;'\">Type of Relationship</a></th>" +
                            "<th><a class='phenumaresult_title' onclick=\"SortTable(4, 'resulttable', 'float'); href='javascript:;'\">Score</a></th>" +
                            "<th><a class='phenumaresult_title' onclick=\"SortTable(5, 'resulttable', 'text'); href='javascript:;'\">Source</a></th>" +
                        "</thead>";
     
     var table_body = "<tbody>";
     
     var data;

     //var keys = Object.keys(network);
     
     for( var subnetwork in network)
     {
         var i = 0;
         
         while ( i < network[subnetwork].length)
         {
            
             data = network[subnetwork][i].data
             
             var source = findObject(data.source)
             var target = findObject(data.target)
             
             var input = "-";
             if(source.input && target.input)   input = "Both"
             else if (source.input)             input = "Nodo1"
             else if (target.input)             input = "Nodo2"
             

             var node1 = passFilter(source.label, filter);
             var node2 = passFilter(target.label, filter);
             var relationship = passFilter(getRelationshipType(data.type), filter);



             if (source != null && target != null && (node1!=null || node2!=null || relationship!=null))
             {
                 if(node1==null)
                     node1 = source.label
                 
                 if(node2==null)
                     node2 = target.label
                 
                 if(relationship==null)
                     relationship = getRelationshipType(data.type)
                 
                 
                 
                 
                 table_body = table_body + "<tr class='phenumaresult_row'>"+
                                               "<td class='phenumaresult_data'><a class='phenumaresult_data' href='"+getLink(source)+"' target='_blank'>"+node1+"</a></td>"+
                                               "<td class='phenumaresult_data'><a class='phenumaresult_data' href='"+getLink(target)+"' target='_blank'>"+node2+"</a></td>"+
                                               "<td class='phenumaresult_data'>"+input+"</td>"+
                                               "<td class='phenumaresult_data'>"+relationship+"</td>"+
                                               "<td class='phenumaresult_data'>"+data.score+"</td>"+
                                               "<td class='phenumaresult_data' >"+getSource(data)+"</td></tr>" 
             }

             i++;
        }
     }
     
     table_body = table_body+"</tbody>";

     $("#resulttable").html(table_header+table_body);
}


function passFilter(data, filter)
{
    
    if (filter == "")
    {
        return data;
    }
    
    var lowerfilter = filter.toLowerCase();
    var lowerdata = data.toLowerCase();
    
    var found = lowerdata.indexOf(lowerfilter);
   
    if(found!=-1)
    {
        var strs = data.split(filter);
        var result = ""
        
        for(var s in strs)
        {
            result = result + strs[s];
            
            if (s<strs.length-1)
                result = result + "<span style='color:orange'>"+filter+"</span>"
        }

        return result;
    }
    
    return  null;
}

function filterTable(data)
{
    datatable(data)
}


function getNodeInformation(node){
    $("input[name = 'falseform:selectedNode']").val(node)
    $("a[id = 'falseform:buttonqtips']").click();
    
}

function getEdgeInformation(edge){

    $("input[name = 'falseform:selectedEdge']").val(edge)
    $("a[id = 'falseform:buttonedgeqtips']").click();
    
}
function getQtipInformaionJSON(){
    
     var data =  $("input[name = 'falseform:qtipinformation']").val();
     return data;
}

function cleanPhenotypesJSON(){
    $("input[name = 'falseform:qtipinformation']").val('');
}




function findObject(id)
{
   
    var network = getNetwork();
    
    var nodes = network.data.nodes
    
    var i = network.data.nodes.length-1;
    
    
    while( i>=0  && nodes[i].id != id)
    {
        i--;
    }
    
    if(i>=0)
        return nodes[i]
    
    return null;
}


function isEmpty(object_array)
{
    var count = 0;
    for(var i in object_array)
        count++
    
    return (count == 0);
}


//Pagination

function pagination(show_per_page, table)
{
	//getting the amount of elements inside content div
	var number_of_items = $(table+' > tbody').children().size();
        
     //   alert(number_of_items)
        
	//calculate the number of pages we are going to have
	var number_of_pages = Math.ceil(number_of_items/show_per_page);
	
	//set the value of our hidden input fields
	$('#current_page').val(0);
	$('#show_per_page').val(show_per_page);
	
	//now when we got all we need for the navigation let's make it '
	
	/* 
	what are we going to have in the navigation?
		- link to previous page
		- links to specific pages
		- link to next page
	*/
	var navigation_html = '<a class="previous_link" href="javascript:previous(\''+table+'\');">Prev</a>';
	var current_link = 0;
	while(number_of_pages > current_link){
		navigation_html += '<a class="page_link" href="javascript:go_to_page(' + current_link +',\''+table+'\')" longdesc="' + current_link +'">'+ (current_link + 1) +'</a>';
		current_link++;
	}
	navigation_html += '<a class="next_link" href="javascript:next(\''+table+'\');">Next</a>';
	
	$('#page_navigation').html(navigation_html);
	
	//add active_page class to the first page link
	$('#page_navigation .page_link:first').addClass('active_page');
	
	//hide all the elements inside content div
	$(table+' > tbody').children().css('display', 'none');
	
	//and show the first n (show_per_page) elements
	$(table+' > tbody').children().slice(0, show_per_page).css( 'display', 'inline' );
}


function previous(table){
	
	new_page = parseInt($('#current_page').val()) - 1;
	//if there is an item before the current active link run the function
	if($('.active_page').prev('.page_link').length==true){
		go_to_page(new_page, table);
	}
	
}

function next(table){
	new_page = parseInt($('#current_page').val()) + 1;
	//if there is an item after the current active link run the function
	if($('.active_page').next('.page_link').length==true){
		go_to_page(new_page, table);
	}
	
}

function go_to_page(page_num, table){
	//get the number of items shown per page
	var show_per_page = parseInt($('#show_per_page').val());
	
        
	//get the element number where to start the slice from
	start_from = page_num * show_per_page;
	
	//get the element number where to end the slice
	end_on = start_from + show_per_page;
	
	//hide all children elements of content div, get specific items and show them
	$(table+' > tbody').children().css('display', 'none').slice(start_from, end_on).css('display', 'inline');
	
	/*get the page link that has longdesc attribute of the current page and add active_page class to it
	and remove that class from previously active page link*/
	$('.page_link[longdesc=' + page_num +']').addClass('active_page').siblings('.active_page').removeClass('active_page');
	
	//update the current page input field
	$('#current_page').val(page_num);
}
  